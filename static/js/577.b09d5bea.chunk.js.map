{"version":3,"file":"static/js/577.b09d5bea.chunk.js","mappings":"0OAKA,EALsB,CAClBA,KAAM,GACNC,OAAQ,ICDZ,EAA0B,6BAA1B,EAA+D,2BAA/D,EAAsG,+BAAtG,EAAiJ,+BAAjJ,EAA8L,iC,SC2D9L,EArDuB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,GAA0BC,EAAAA,EAAAA,WAAS,UAAKC,IAAxC,eAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAe,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZR,EAAeQ,EAAfR,KAAMS,EAASD,EAATC,MACbH,GAAS,SAAAI,GACL,OAAO,kBAAIA,GAAX,cAAuBV,EAAOS,GACjC,GACJ,EAOOT,EAAiBK,EAAjBL,KAAMC,EAAWI,EAAXJ,OAEd,OACQ,kBAAMC,SATO,SAAAS,GACjBA,EAAEC,iBACFV,EAAS,CAACF,KAAAA,EAAMC,OAAAA,IAChBK,GAAS,UAAIF,GAChB,EAKO,WACI,4BACI,kBAAOS,UAAWC,EAAlB,mBACA,kBACED,UAAWC,EACXC,KAAK,OACLf,KAAK,OACLgB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRT,MAAOT,EACPmB,SAAUZ,EACVa,YAAY,aAGlB,4BACI,kBAAOP,UAAWC,EAAlB,qBACA,kBACED,UAAWC,EACXC,KAAK,MACLf,KAAK,SACLgB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRT,MAAOR,EACPkB,SAAUZ,EACVa,YAAY,yBAGlB,mBAAQL,KAAK,SAAb,2BAIf,ECtDKM,EAAgB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,cAEfC,EAF6C,EAAfC,SAEPC,KAAI,gBAAGC,EAAH,EAAGA,GAAI1B,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OAA0B,gBAAIY,UAAWC,EAAf,UAA6Cd,EAA7C,OAAuDC,EAAvD,KACvD,mBAAQ0B,QAAS,kBAAML,EAAcI,EAApB,EAAyBX,KAAK,SAA/C,sBAD+FW,EAAlE,IAGjC,OACI,wBACKH,GAIZ,EAED,IAEAF,EAAcO,aAAe,CACzBJ,SAAU,IChBd,IAiBA,EAjByB,SAAC,GAAoB,IAAnBjB,EAAkB,EAAlBA,aACvB,OACI,4BACI,kBAAOM,UAAWC,EAAlB,oCACA,kBACED,UAAWC,EACXC,KAAK,OACLf,KAAK,SACLgB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAAUZ,MAIvB,E,iBCjBYsB,EAAsB,SAAC,GAAwB,IAAvBL,EAAsB,EAAtBA,SAAUM,EAAY,EAAZA,OAC3C,IAAKA,EACE,OAAON,EAASO,MAGvB,IAAMC,EAAmBF,EAAOG,cAKhC,OAJeT,EAASO,MAAMD,QAAO,YAAuB,IAApB9B,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC1C,OAAQD,EAAKiC,cAAcC,SAASF,IAAqB/B,EAAOgC,cAAcC,SAASF,EAC1F,GAGJ,ECbYG,EAAY,SAAC,GAAD,SAAEL,MAAF,ECqEzB,EA9CmB,WACf,IAAMM,GAAmBC,EAAAA,EAAAA,IAAYR,GAE/BC,GAASO,EAAAA,EAAAA,IAAYF,GAErBG,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACNF,GAASG,EAAAA,EAAAA,MACZ,GAAE,CAACH,IAGJ,IAWMI,EAAaC,QAAQP,EAAiBQ,QAG5C,OACI,4BACO,uCACC,iBAAK/B,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,yCACA,SAAC,EAAD,CAAgBZ,SApBX,SAAC,GAAsB,IAApBF,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC/BqC,GAASO,EAAAA,EAAAA,IAAgB,CAAE7C,KAAAA,EAAMC,OAAAA,IACnC,QAoBgB,sCACD,iBAAKY,UAAWC,EAAhB,WACK,SAAC,EAAD,CAAkBL,MAAOqB,EAAQvB,aAjBjC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpB8B,GAASQ,EAAAA,EAAAA,GAAUtC,EAAOC,OAC7B,IAgBqBiC,IAAc,SAAC,EAAD,CAAepB,cArB7B,SAACI,GACnBY,GAASS,EAAAA,EAAAA,IAAmBrB,GAC/B,EAmBgFF,SAAUY,KACpEM,IAAc,uDAMxC,ECzDD,EARuB,WACnB,OACI,0BACI,SAAC,EAAD,KAGX,C","sources":["modules/MyContacts/MyContactsForm/initialState.js","webpack://goit-react-hw-08-phonebook/./src/modules/MyContacts/my-contacts.module.scss?e51e","modules/MyContacts/MyContactsForm/MyContactsForm.jsx","modules/MyContacts/MyContactList/MyContactList.jsx","modules/MyContacts/MyContactsFilter/MyContactsFilter.jsx","redux/contacts/contacts-selectors.js","redux/filter/filter-selectors.js","modules/MyContacts/MyContacts.jsx","pages/MyContactsPage/MyContactsPage.jsx"],"sourcesContent":["const inititalState = {\n    name: \"\",\n    number: \"\",\n}\n\nexport default inititalState;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"my-contacts_wrapper__VuANF\",\"block\":\"my-contacts_block__79Vcv\",\"formGroup\":\"my-contacts_formGroup__ND2U-\",\"formInput\":\"my-contacts_formInput__p-ZS2\",\"formContact\":\"my-contacts_formContact__+2NDw\"};","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport inititalState from \"./initialState\";\n\nimport styles from \"../my-contacts.module.scss\";\n\nconst MyContactsForm = ({ onSubmit }) => {\n    const [state, setState] = useState({ ...inititalState })\n    \n    const handleChange = ({target}) => {\n        const {name, value} = target;\n        setState(prevState => {\n            return {...prevState, [name]: value}\n        })\n    }\n    const handleSubmit = e => {\n        e.preventDefault();\n        onSubmit({name, number});\n        setState({...inititalState});\n    }\n\n    const { name, number } = state;\n    \n    return (\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label className={styles.formGroup}>Name</label>\n                    <input\n                      className={styles.formInput}\n                      type=\"text\"\n                      name=\"name\"\n                      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                      required\n                      value={name}\n                      onChange={handleChange}\n                      placeholder=\"Name\"\n                     />\n                </div>\n                <div>\n                    <label className={styles.formGroup}>Number</label>\n                    <input\n                      className={styles.formInput}\n                      type=\"tel\"\n                      name=\"number\"\n                      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                      title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                      required\n                      value={number}\n                      onChange={handleChange}\n                      placeholder=\"+38011-111-11-11\"\n                      />\n                </div>\n                <button type=\"submit\">Add contact</button>\n            </form>\n        )\n\n}\n\nexport default MyContactsForm;\n\nMyContactsForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}\n// class MyContactsForm extends Component {\n//     state = {...inititalState}\n\n//     handleSubmit = (e) => {\n//         e.preventDefault();\n//         const {onSubmit} = this.props;\n//         const result = onSubmit({...this.state});\n//         if(result) {\n//             this.reset();\n//         }\n//     }\n\n//     reset() {\n//         this.setState({...inititalState})\n//     }\n\n//     handleChange = ({ target }) => {\n//         const { name, value } = target;\n//         this.setState({\n//             [name]: value\n//         })\n//     }\n\n//     render() {\n//         const {handleChange, handleSubmit} = this;\n//         const {name, number} = this.state;\n\n//         return (\n//             <form onSubmit={handleSubmit}>\n//                 <div>\n//                     <label className={styles.formGroup}>Name</label>\n//                     <input\n//                       className={styles.formInput}\n//                       type=\"text\"\n//                       name=\"name\"\n//                       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//                       title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//                       required\n//                       value={name}\n//                       onChange={handleChange}\n//                       placeholder=\"Name\"\n//                      />\n//                 </div>\n//                 <div>\n//                     <label className={styles.formGroup}>Number</label>\n//                     <input\n//                       className={styles.formInput}\n//                       type=\"tel\"\n//                       name=\"number\"\n//                       pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//                       title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//                       required\n//                       value={number}\n//                       onChange={handleChange}\n//                       placeholder=\"+38011-111-11-11\"\n//                       />\n//                 </div>\n//                 <button type=\"submit\">Add contact</button>\n//             </form>\n//         )\n//     }\n// }\n\n\n","import PropTypes from \"prop-types\";\n \nimport styles from \"../my-contacts.module.scss\";\n\nconst MyContactList = ({ removeContact, contacts }) => {\n\n    const contactList = contacts.map(({ id, name, number }) => <li className={styles.formContact} key={id}>{name}. : {number}.\n        <button onClick={() => removeContact(id)} type=\"button\">Delete</button></li>);\n\n    return (\n        <ol>\n            {contactList}\n        </ol>\n    )\n\n}\n\nexport default MyContactList;\n\nMyContactList.defaultProps = {\n    contacts: []\n}\n\nMyContactList.propTypes = {\n    removeContact: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name:  PropTypes.string.isRequired,\n        number:  PropTypes.string.isRequired,\n    }))\n}","import PropTypes from \"prop-types\";\n\nimport styles from \"../my-contacts.module.scss\";\n\nconst MyContactsFilter = ({handleChange}) => {\n    return (\n        <div>\n            <label className={styles.formGroup}>Find contacts by name</label>\n            <input\n              className={styles.formInput}\n              type=\"text\"\n              name=\"filter\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              onChange={handleChange}\n              />\n        </div>\n    )\n}\n\nexport default MyContactsFilter;\n\nMyContactsFilter.propTypes = {\n    handleChange: PropTypes.func.isRequired,\n}","export const getAllContacts = store => store.contacts;\n\nexport const getFilteredContacts = ({contacts, filter}) => {\n    if (!filter) {\n           return contacts.items;\n    }\n\n    const normalizedFilter = filter.toLowerCase();\n    const result = contacts.items.filter(({ name, number }) => {\n        return (name.toLowerCase().includes(normalizedFilter) || number.toLowerCase().includes(normalizedFilter))\n    })\n    \n    return result;\n}","export const getFilter = ({filter}) => filter;","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\n\nimport MyContactsForm from \"./MyContactsForm/MyContactsForm\";\nimport MyContactList from \"./MyContactList/MyContactList\";\nimport MyContactsFilter from \"./MyContactsFilter/MyContactsFilter\";\n\n\nimport {\n    fetchAllContacts,\n    fetchAddContact,\n    fetchDeleteContact\n} from \"../../redux/contacts/contacts-operations\";\n\nimport {setFilter} from \"../../redux/filter/filter-slice\";\n\nimport { getFilteredContacts } from \"../../redux/contacts/contacts-selectors\";\nimport {getFilter} from \"../../redux/filter/filter-selectors\";\n\n\nimport styles from \"./my-contacts.module.scss\";\n\nconst MyContacts = () => {\n    const filteredContacts = useSelector(getFilteredContacts);\n   \n    const filter = useSelector(getFilter);\n\n    const dispatch = useDispatch();\n\n    useEffect(()=> {\n        dispatch(fetchAllContacts())\n    }, [dispatch])\n \n   \n    const handleAddContact = ({ name, number }) => {\n       dispatch(fetchAddContact({ name, number }));\n    }\n    \n    const removeContact = (id) => {\n        dispatch(fetchDeleteContact(id));\n    }\n    const handleFilter = ({ target }) => {\n        dispatch(setFilter(target.value))\n    };\n\n    const isContacts = Boolean(filteredContacts.length);\n    \n\n    return (\n        <div>\n               <h1>Phonebook</h1>\n                <div className={styles.wrapper}>\n                    <div className={styles.block}>\n                        <h4>Add contact</h4>\n                        <MyContactsForm onSubmit={handleAddContact} />\n                     </div>\n                     <h2>Contacts</h2>\n                    <div className={styles.block}>\n                         <MyContactsFilter value={filter} handleChange={handleFilter} />\n                         {isContacts && <MyContactList removeContact={removeContact} contacts={filteredContacts} />}\n                         {!isContacts && <p>No contacts in list</p>}\n                     </div>\n                 </div>\n             </div>\n        \n    )\n}\n\nexport default MyContacts;\n// class MyContacts extends Component {\n\n//     state = {\n//         contacts: [],\n//         filter: \"\",\n//     }\n\n//     componentDidMount() {\n//         const contacts = JSON.parse(localStorage.getItem(\"my-contacts\"));\n//         if(contacts?.length) {\n//             this.setState({contacts})\n//         }\n//     }\n\n//     componentDidUpdate(prevProps, prevState){\n     \n//         const {contacts} = this.state;\n//         if(prevState.contacts.length !== contacts.length) {\n//            localStorage.setItem(\"my-contacts\", JSON.stringify(contacts));\n//         }\n//     }\n\n//     removeContact = (id) => {\n//         this.setState(({contacts}) => {\n//             const newContacts = contacts.filter(contact => contact.id !== id);\n//             return {contacts: newContacts}\n//         })\n//     }\n\n//     addContact = ({name, number}) => {\n//         if(this.isDublicate(name, number)) {\n//             alert(`${name}. : ${number} is already in contacts`); \n//             return false;\n//         }\n\n//         this.setState(prevState => {\n//             const {contacts} = prevState;\n\n//             const newContact = {\n//                 id: nanoid(),\n//                 name,\n//                 number,\n//             }\n\n//             return {contacts: [newContact, ...contacts]}\n//         })\n//         return true;\n//     }\n\n//     handleFilter = ({target})=> {\n//         this.setState({filter: target.value})\n//     }\n\n//     isDublicate(name, number) {\n//         const normalizedTitle = name.toLowerCase();\n//         const normalizedAuthor = number.toLowerCase();\n//         const {contacts} = this.state;\n//         const result = contacts.find(({name, number}) => {\n//             return (name.toLowerCase() === normalizedTitle && number.toLowerCase() === normalizedAuthor)\n//         })\n\n//         return Boolean(result)\n//     }\n\n//     getFilteredContacts() {\n//         const {filter, contacts} = this.state;\n//         if(!filter) {\n//             return contacts;\n//         }\n        \n//         const normalizedFilter = filter.toLowerCase()\n//         const result = contacts.filter(({name, number})=> {\n//             return (name.toLowerCase().includes(normalizedFilter) ||  number.toLowerCase().includes(normalizedFilter))\n//         })\n\n//         return result;\n//     }\n\n//     render() {\n//         const {addContact, removeContact, handleFilter} = this;\n//         const contacts = this.getFilteredContacts();\n//         const isContacts = Boolean(contacts.length);\n  \n//         return (\n//             <div>\n//                 <h1>Phonebook</h1>\n//                 <div className={styles.wrapper}>\n//                     <div className={styles.block}>\n//                         <h4>Add contact</h4>\n//                         <MyContactsForm onSubmit={addContact} />\n//                     </div>\n//                     <h2>Contacts</h2>\n//                     <div className={styles.block}>\n//                         <MyContactsFilter handleChange={handleFilter} />\n//                         {isContacts && <MyContactList removeContact={removeContact} contacts={contacts} />}\n//                         {!isContacts && <p>No books in list</p>}\n//                     </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n","import MyContacts from \"../../modules/MyContacts/MyContacts\";\n\nconst MyContactsPage = () => {\n    return (\n        <div>\n            <MyContacts />\n        </div>\n    )\n}\n\nexport default MyContactsPage;"],"names":["name","number","onSubmit","useState","inititalState","state","setState","handleChange","target","value","prevState","e","preventDefault","className","styles","type","pattern","title","required","onChange","placeholder","MyContactList","removeContact","contactList","contacts","map","id","onClick","defaultProps","getFilteredContacts","filter","items","normalizedFilter","toLowerCase","includes","getFilter","filteredContacts","useSelector","dispatch","useDispatch","useEffect","fetchAllContacts","isContacts","Boolean","length","fetchAddContact","setFilter","fetchDeleteContact"],"sourceRoot":""}